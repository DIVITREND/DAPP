/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface DivitrendInterface extends utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "createSnapshot()": FunctionFragment;
    "currentSnapshotId()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "depositTax(uint256)": FunctionFragment;
    "disableBlacklist(address)": FunctionFragment;
    "enableBlacklist(address)": FunctionFragment;
    "exclude(address)": FunctionFragment;
    "getAutoSwap()": FunctionFragment;
    "getBuyTax()": FunctionFragment;
    "getCollectedTaxes()": FunctionFragment;
    "getDivitrendRewardsAddress()": FunctionFragment;
    "getExchangeAddress()": FunctionFragment;
    "getFounderPerc()": FunctionFragment;
    "getFounderWallet()": FunctionFragment;
    "getLiquidityPerc()": FunctionFragment;
    "getLiquidityWallet()": FunctionFragment;
    "getPairAddress()": FunctionFragment;
    "getRouterAddress()": FunctionFragment;
    "getSellTax()": FunctionFragment;
    "getStakedCapPerc()": FunctionFragment;
    "getStakedCapitalWallet()": FunctionFragment;
    "getSwapThreshold()": FunctionFragment;
    "getUniswapV2Factory()": FunctionFragment;
    "getUniswapV2Pair()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isBlacklisted(address)": FunctionFragment;
    "isExcluded(address)": FunctionFragment;
    "manualSwapAndLiquify()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeExclude(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAutoSwap(bool)": FunctionFragment;
    "setBuyTax(uint8)": FunctionFragment;
    "setDivitrendRewardsAddress(address)": FunctionFragment;
    "setExchangeAddress(address)": FunctionFragment;
    "setFounderPerc(uint16)": FunctionFragment;
    "setFounderWallet(address)": FunctionFragment;
    "setLiquidityPerc(uint16)": FunctionFragment;
    "setLiquidityWallet(address)": FunctionFragment;
    "setRouterAddress(address)": FunctionFragment;
    "setSellTax(uint8)": FunctionFragment;
    "setStakedCapPerc(uint16)": FunctionFragment;
    "setStakedCapitalWallet(address)": FunctionFragment;
    "setSwapThreshold(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdrawETH()": FunctionFragment;
    "withdrawTokens(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "balanceOfAt"
      | "burn"
      | "burnFrom"
      | "createSnapshot"
      | "currentSnapshotId"
      | "decimals"
      | "decreaseAllowance"
      | "depositTax"
      | "disableBlacklist"
      | "enableBlacklist"
      | "exclude"
      | "getAutoSwap"
      | "getBuyTax"
      | "getCollectedTaxes"
      | "getDivitrendRewardsAddress"
      | "getExchangeAddress"
      | "getFounderPerc"
      | "getFounderWallet"
      | "getLiquidityPerc"
      | "getLiquidityWallet"
      | "getPairAddress"
      | "getRouterAddress"
      | "getSellTax"
      | "getStakedCapPerc"
      | "getStakedCapitalWallet"
      | "getSwapThreshold"
      | "getUniswapV2Factory"
      | "getUniswapV2Pair"
      | "increaseAllowance"
      | "isBlacklisted"
      | "isExcluded"
      | "manualSwapAndLiquify"
      | "name"
      | "owner"
      | "pause"
      | "paused"
      | "removeExclude"
      | "renounceOwnership"
      | "setAutoSwap"
      | "setBuyTax"
      | "setDivitrendRewardsAddress"
      | "setExchangeAddress"
      | "setFounderPerc"
      | "setFounderWallet"
      | "setLiquidityPerc"
      | "setLiquidityWallet"
      | "setRouterAddress"
      | "setSellTax"
      | "setStakedCapPerc"
      | "setStakedCapitalWallet"
      | "setSwapThreshold"
      | "symbol"
      | "totalSupply"
      | "totalSupplyAt"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unpause"
      | "withdrawETH"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createSnapshot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSnapshotId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTax",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disableBlacklist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableBlacklist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "exclude",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAutoSwap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getBuyTax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCollectedTaxes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDivitrendRewardsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFounderPerc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFounderWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityPerc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPairAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSellTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedCapPerc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedCapitalWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV2Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcluded",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "manualSwapAndLiquify",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeExclude",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutoSwap",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyTax",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDivitrendRewardsAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangeAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFounderPerc",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFounderWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityPerc",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouterAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellTax",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakedCapPerc",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakedCapitalWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSnapshotId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exclude", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAutoSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBuyTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCollectedTaxes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDivitrendRewardsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFounderPerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFounderWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityPerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSellTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakedCapPerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedCapitalWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV2Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isExcluded", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manualSwapAndLiquify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeExclude",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutoSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBuyTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDivitrendRewardsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFounderPerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFounderWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityPerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSellTax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakedCapPerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakedCapitalWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Snapshot(uint256)": EventFragment;
    "Swapped(address,uint256,bool,uint256,uint256)": EventFragment;
    "TaxDeposited(address,uint256)": EventFragment;
    "TaxHandled(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Snapshot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaxDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaxHandled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SnapshotEventObject {
  id: BigNumber;
}
export type SnapshotEvent = TypedEvent<[BigNumber], SnapshotEventObject>;

export type SnapshotEventFilter = TypedEventFilter<SnapshotEvent>;

export interface SwappedEventObject {
  account: string;
  amount: BigNumber;
  isBuy: boolean;
  reserve0: BigNumber;
  reserve1: BigNumber;
}
export type SwappedEvent = TypedEvent<
  [string, BigNumber, boolean, BigNumber, BigNumber],
  SwappedEventObject
>;

export type SwappedEventFilter = TypedEventFilter<SwappedEvent>;

export interface TaxDepositedEventObject {
  account: string;
  amount: BigNumber;
}
export type TaxDepositedEvent = TypedEvent<
  [string, BigNumber],
  TaxDepositedEventObject
>;

export type TaxDepositedEventFilter = TypedEventFilter<TaxDepositedEvent>;

export interface TaxHandledEventObject {
  amount: BigNumber;
  tax: BigNumber;
}
export type TaxHandledEvent = TypedEvent<
  [BigNumber, BigNumber],
  TaxHandledEventObject
>;

export type TaxHandledEventFilter = TypedEventFilter<TaxHandledEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Divitrend extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DivitrendInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSnapshot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentSnapshotId(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositTax(
      taxAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableBlacklist(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableBlacklist(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exclude(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAutoSwap(overrides?: CallOverrides): Promise<[boolean]>;

    getBuyTax(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCollectedTaxes(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDivitrendRewardsAddress(overrides?: CallOverrides): Promise<[string]>;

    getExchangeAddress(overrides?: CallOverrides): Promise<[string]>;

    getFounderPerc(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFounderWallet(overrides?: CallOverrides): Promise<[string]>;

    getLiquidityPerc(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiquidityWallet(overrides?: CallOverrides): Promise<[string]>;

    getPairAddress(overrides?: CallOverrides): Promise<[string]>;

    getRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    getSellTax(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakedCapPerc(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakedCapitalWallet(overrides?: CallOverrides): Promise<[string]>;

    getSwapThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUniswapV2Factory(overrides?: CallOverrides): Promise<[string]>;

    getUniswapV2Pair(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isBlacklisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExcluded(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    manualSwapAndLiquify(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeExclude(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAutoSwap(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBuyTax(
      tax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDivitrendRewardsAddress(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExchangeAddress(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFounderPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFounderWallet(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidityPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidityWallet(
      account: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRouterAddress(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSellTax(
      tax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakedCapPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakedCapitalWallet(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapThreshold(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfAt(
    account: PromiseOrValue<string>,
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnFrom(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSnapshot(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositTax(
    taxAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableBlacklist(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableBlacklist(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exclude(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAutoSwap(overrides?: CallOverrides): Promise<boolean>;

  getBuyTax(overrides?: CallOverrides): Promise<BigNumber>;

  getCollectedTaxes(overrides?: CallOverrides): Promise<BigNumber>;

  getDivitrendRewardsAddress(overrides?: CallOverrides): Promise<string>;

  getExchangeAddress(overrides?: CallOverrides): Promise<string>;

  getFounderPerc(overrides?: CallOverrides): Promise<BigNumber>;

  getFounderWallet(overrides?: CallOverrides): Promise<string>;

  getLiquidityPerc(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidityWallet(overrides?: CallOverrides): Promise<string>;

  getPairAddress(overrides?: CallOverrides): Promise<string>;

  getRouterAddress(overrides?: CallOverrides): Promise<string>;

  getSellTax(overrides?: CallOverrides): Promise<BigNumber>;

  getStakedCapPerc(overrides?: CallOverrides): Promise<BigNumber>;

  getStakedCapitalWallet(overrides?: CallOverrides): Promise<string>;

  getSwapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  getUniswapV2Factory(overrides?: CallOverrides): Promise<string>;

  getUniswapV2Pair(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isBlacklisted(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isExcluded(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  manualSwapAndLiquify(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeExclude(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAutoSwap(
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBuyTax(
    tax: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDivitrendRewardsAddress(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExchangeAddress(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFounderPerc(
    perc: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFounderWallet(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidityPerc(
    perc: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidityWallet(
    account: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRouterAddress(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSellTax(
    tax: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakedCapPerc(
    perc: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakedCapitalWallet(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapThreshold(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(
    snapshotId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawETH(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createSnapshot(overrides?: CallOverrides): Promise<void>;

    currentSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositTax(
      taxAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    disableBlacklist(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    enableBlacklist(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    exclude(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAutoSwap(overrides?: CallOverrides): Promise<boolean>;

    getBuyTax(overrides?: CallOverrides): Promise<BigNumber>;

    getCollectedTaxes(overrides?: CallOverrides): Promise<BigNumber>;

    getDivitrendRewardsAddress(overrides?: CallOverrides): Promise<string>;

    getExchangeAddress(overrides?: CallOverrides): Promise<string>;

    getFounderPerc(overrides?: CallOverrides): Promise<BigNumber>;

    getFounderWallet(overrides?: CallOverrides): Promise<string>;

    getLiquidityPerc(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityWallet(overrides?: CallOverrides): Promise<string>;

    getPairAddress(overrides?: CallOverrides): Promise<string>;

    getRouterAddress(overrides?: CallOverrides): Promise<string>;

    getSellTax(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedCapPerc(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedCapitalWallet(overrides?: CallOverrides): Promise<string>;

    getSwapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getUniswapV2Factory(overrides?: CallOverrides): Promise<string>;

    getUniswapV2Pair(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBlacklisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcluded(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    manualSwapAndLiquify(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeExclude(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAutoSwap(
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyTax(
      tax: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDivitrendRewardsAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchangeAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFounderPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFounderWallet(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityWallet(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouterAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSellTax(
      tax: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakedCapPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakedCapitalWallet(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapThreshold(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdrawETH(overrides?: CallOverrides): Promise<void>;

    withdrawTokens(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Snapshot(uint256)"(id?: null): SnapshotEventFilter;
    Snapshot(id?: null): SnapshotEventFilter;

    "Swapped(address,uint256,bool,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      isBuy?: null,
      reserve0?: null,
      reserve1?: null
    ): SwappedEventFilter;
    Swapped(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      isBuy?: null,
      reserve0?: null,
      reserve1?: null
    ): SwappedEventFilter;

    "TaxDeposited(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): TaxDepositedEventFilter;
    TaxDeposited(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): TaxDepositedEventFilter;

    "TaxHandled(uint256,uint256)"(
      amount?: null,
      tax?: null
    ): TaxHandledEventFilter;
    TaxHandled(amount?: null, tax?: null): TaxHandledEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSnapshot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositTax(
      taxAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableBlacklist(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableBlacklist(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exclude(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAutoSwap(overrides?: CallOverrides): Promise<BigNumber>;

    getBuyTax(overrides?: CallOverrides): Promise<BigNumber>;

    getCollectedTaxes(overrides?: CallOverrides): Promise<BigNumber>;

    getDivitrendRewardsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getFounderPerc(overrides?: CallOverrides): Promise<BigNumber>;

    getFounderWallet(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityPerc(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityWallet(overrides?: CallOverrides): Promise<BigNumber>;

    getPairAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getSellTax(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedCapPerc(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedCapitalWallet(overrides?: CallOverrides): Promise<BigNumber>;

    getSwapThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getUniswapV2Factory(overrides?: CallOverrides): Promise<BigNumber>;

    getUniswapV2Pair(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isBlacklisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExcluded(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manualSwapAndLiquify(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeExclude(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAutoSwap(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBuyTax(
      tax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDivitrendRewardsAddress(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExchangeAddress(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFounderPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFounderWallet(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidityPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidityWallet(
      account: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRouterAddress(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSellTax(
      tax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakedCapPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakedCapitalWallet(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapThreshold(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTokens(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      account: PromiseOrValue<string>,
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSnapshot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentSnapshotId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositTax(
      taxAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableBlacklist(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableBlacklist(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exclude(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAutoSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBuyTax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollectedTaxes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDivitrendRewardsAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchangeAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFounderPerc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFounderWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidityPerc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidityWallet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRouterAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSellTax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakedCapPerc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakedCapitalWallet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUniswapV2Factory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniswapV2Pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isBlacklisted(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExcluded(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manualSwapAndLiquify(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeExclude(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAutoSwap(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBuyTax(
      tax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDivitrendRewardsAddress(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExchangeAddress(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFounderPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFounderWallet(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityWallet(
      account: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRouterAddress(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSellTax(
      tax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakedCapPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakedCapitalWallet(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapThreshold(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(
      snapshotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
