/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace DivitrendRewards {
  export type NftStakeStruct = {
    amount: PromiseOrValue<BigNumberish>;
    nftIds: PromiseOrValue<BigNumberish>[];
    timestamp: PromiseOrValue<BigNumberish>;
    depositNum: PromiseOrValue<BigNumberish>;
  };

  export type NftStakeStructOutput = [
    BigNumber,
    BigNumber[],
    BigNumber,
    BigNumber
  ] & {
    amount: BigNumber;
    nftIds: BigNumber[];
    timestamp: BigNumber;
    depositNum: BigNumber;
  };

  export type TrndStakeStruct = {
    amount: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    depositNum: PromiseOrValue<BigNumberish>;
  };

  export type TrndStakeStructOutput = [BigNumber, BigNumber, BigNumber] & {
    amount: BigNumber;
    timestamp: BigNumber;
    depositNum: BigNumber;
  };
}

export interface DivitrendRewardsInterface extends utils.Interface {
  functions: {
    "claimEth()": FunctionFragment;
    "claimStaking(uint8,uint8)": FunctionFragment;
    "depositETH()": FunctionFragment;
    "enterStaking(uint256,uint8)": FunctionFragment;
    "exitStaking(uint8)": FunctionFragment;
    "getActualMalus(address,uint8)": FunctionFragment;
    "getContractBalance()": FunctionFragment;
    "getContractNftBalance()": FunctionFragment;
    "getDepositETH(uint256)": FunctionFragment;
    "getDepositNumber()": FunctionFragment;
    "getEthDeposit(uint256)": FunctionFragment;
    "getLastEthDeposit()": FunctionFragment;
    "getLastNftCount(address)": FunctionFragment;
    "getLastStakingCount(address)": FunctionFragment;
    "getMalusPerc()": FunctionFragment;
    "getMalusTaxPerc()": FunctionFragment;
    "getNftCountHistory(address)": FunctionFragment;
    "getPaused()": FunctionFragment;
    "getStakingCountHistory(address)": FunctionFragment;
    "getStakingLimit()": FunctionFragment;
    "getStakingOptionData(uint8)": FunctionFragment;
    "getStakingOptions()": FunctionFragment;
    "getTRNDAddress()": FunctionFragment;
    "getThreshold()": FunctionFragment;
    "getTotStakAboveThres()": FunctionFragment;
    "getTotStakingAmount()": FunctionFragment;
    "getTotalRewardedETH()": FunctionFragment;
    "getTrndNftAddress()": FunctionFragment;
    "getUserEthClaimData(address)": FunctionFragment;
    "getUserNftStakingData(address,uint8)": FunctionFragment;
    "getUserStakingClaimData(address,uint8)": FunctionFragment;
    "getUserStakingData(address,uint8)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingEthRew(address)": FunctionFragment;
    "pendingNftEthRew(address)": FunctionFragment;
    "pendingStakingRew(address,uint8)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMalusPerc(uint24)": FunctionFragment;
    "setMalusTaxPerc(uint8)": FunctionFragment;
    "setStakingLimit(uint256)": FunctionFragment;
    "setStakingOptionData(uint8,uint32,uint256,uint8)": FunctionFragment;
    "setStakingOptions(uint8[])": FunctionFragment;
    "setTRNDAddress(address)": FunctionFragment;
    "setThreshold(uint256)": FunctionFragment;
    "setTrndNftAddress(address)": FunctionFragment;
    "stakeNfts(uint256[],uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unstakeNfts(uint8,uint256[])": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdrawERC721(address,uint256)": FunctionFragment;
    "withdrawETH()": FunctionFragment;
    "withdrawTokens(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimEth"
      | "claimStaking"
      | "depositETH"
      | "enterStaking"
      | "exitStaking"
      | "getActualMalus"
      | "getContractBalance"
      | "getContractNftBalance"
      | "getDepositETH"
      | "getDepositNumber"
      | "getEthDeposit"
      | "getLastEthDeposit"
      | "getLastNftCount"
      | "getLastStakingCount"
      | "getMalusPerc"
      | "getMalusTaxPerc"
      | "getNftCountHistory"
      | "getPaused"
      | "getStakingCountHistory"
      | "getStakingLimit"
      | "getStakingOptionData"
      | "getStakingOptions"
      | "getTRNDAddress"
      | "getThreshold"
      | "getTotStakAboveThres"
      | "getTotStakingAmount"
      | "getTotalRewardedETH"
      | "getTrndNftAddress"
      | "getUserEthClaimData"
      | "getUserNftStakingData"
      | "getUserStakingClaimData"
      | "getUserStakingData"
      | "initialize"
      | "onERC721Received"
      | "owner"
      | "pause"
      | "paused"
      | "pendingEthRew"
      | "pendingNftEthRew"
      | "pendingStakingRew"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setMalusPerc"
      | "setMalusTaxPerc"
      | "setStakingLimit"
      | "setStakingOptionData"
      | "setStakingOptions"
      | "setTRNDAddress"
      | "setThreshold"
      | "setTrndNftAddress"
      | "stakeNfts"
      | "transferOwnership"
      | "unpause"
      | "unstakeNfts"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdrawERC721"
      | "withdrawETH"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "claimEth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimStaking",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterStaking",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exitStaking",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActualMalus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractNftBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositETH",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastEthDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastNftCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastStakingCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMalusPerc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMalusTaxPerc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNftCountHistory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStakingCountHistory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingOptionData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingOptions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTRNDAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotStakAboveThres",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotStakingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRewardedETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrndNftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEthClaimData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNftStakingData",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakingClaimData",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakingData",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingEthRew",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingNftEthRew",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingStakingRew",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMalusPerc",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMalusTaxPerc",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingOptionData",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingOptions",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTRNDAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrndNftAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeNfts",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstakeNfts",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "claimEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActualMalus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractNftBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastEthDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastNftCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastStakingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMalusPerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMalusTaxPerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftCountHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakingCountHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingOptionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTRNDAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotStakAboveThres",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRewardedETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrndNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEthClaimData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserNftStakingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakingClaimData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingEthRew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingNftEthRew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingStakingRew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMalusPerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMalusTaxPerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingOptionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTRNDAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrndNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeNfts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeNfts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "EthClaimed(address,uint256)": EventFragment;
    "EthDeposited(address,uint256,uint256)": EventFragment;
    "FactoriesStaked(address,uint256,uint256[],uint8)": EventFragment;
    "FactoriesUnstaked(address,uint256,uint256[],uint8)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "TrndClaimed(address,uint256,uint8)": EventFragment;
    "TrndCompounded(address,uint256,uint8)": EventFragment;
    "TrndStaked(address,uint256,uint8)": EventFragment;
    "TrndUnstaked(address,uint256,uint8)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactoriesStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactoriesUnstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrndClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrndCompounded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrndStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrndUnstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface EthClaimedEventObject {
  account: string;
  amount: BigNumber;
}
export type EthClaimedEvent = TypedEvent<
  [string, BigNumber],
  EthClaimedEventObject
>;

export type EthClaimedEventFilter = TypedEventFilter<EthClaimedEvent>;

export interface EthDepositedEventObject {
  account: string;
  amount: BigNumber;
  remainingsWithdrawn: BigNumber;
}
export type EthDepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  EthDepositedEventObject
>;

export type EthDepositedEventFilter = TypedEventFilter<EthDepositedEvent>;

export interface FactoriesStakedEventObject {
  account: string;
  amount: BigNumber;
  nftIds: BigNumber[];
  stakingOption: number;
}
export type FactoriesStakedEvent = TypedEvent<
  [string, BigNumber, BigNumber[], number],
  FactoriesStakedEventObject
>;

export type FactoriesStakedEventFilter = TypedEventFilter<FactoriesStakedEvent>;

export interface FactoriesUnstakedEventObject {
  account: string;
  amount: BigNumber;
  nftIds: BigNumber[];
  stakingOption: number;
}
export type FactoriesUnstakedEvent = TypedEvent<
  [string, BigNumber, BigNumber[], number],
  FactoriesUnstakedEventObject
>;

export type FactoriesUnstakedEventFilter =
  TypedEventFilter<FactoriesUnstakedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface TrndClaimedEventObject {
  account: string;
  amount: BigNumber;
  stakingOption: number;
}
export type TrndClaimedEvent = TypedEvent<
  [string, BigNumber, number],
  TrndClaimedEventObject
>;

export type TrndClaimedEventFilter = TypedEventFilter<TrndClaimedEvent>;

export interface TrndCompoundedEventObject {
  account: string;
  amount: BigNumber;
  stakingOption: number;
}
export type TrndCompoundedEvent = TypedEvent<
  [string, BigNumber, number],
  TrndCompoundedEventObject
>;

export type TrndCompoundedEventFilter = TypedEventFilter<TrndCompoundedEvent>;

export interface TrndStakedEventObject {
  account: string;
  amount: BigNumber;
  stakingOption: number;
}
export type TrndStakedEvent = TypedEvent<
  [string, BigNumber, number],
  TrndStakedEventObject
>;

export type TrndStakedEventFilter = TypedEventFilter<TrndStakedEvent>;

export interface TrndUnstakedEventObject {
  account: string;
  amount: BigNumber;
  stakingOption: number;
}
export type TrndUnstakedEvent = TypedEvent<
  [string, BigNumber, number],
  TrndUnstakedEventObject
>;

export type TrndUnstakedEventFilter = TypedEventFilter<TrndUnstakedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface DivitrendRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DivitrendRewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimEth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimStaking(
      _stakingOption: PromiseOrValue<BigNumberish>,
      compoundPerc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enterStaking(
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitStaking(
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActualMalus(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getContractBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getContractNftBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDepositETH(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getDepositNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEthDeposit(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getLastEthDeposit(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getLastNftCount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[], BigNumber, BigNumber]>;

    getLastStakingCount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getMalusPerc(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMalusTaxPerc(overrides?: CallOverrides): Promise<[number]>;

    getNftCountHistory(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[DivitrendRewards.NftStakeStructOutput[]]>;

    getPaused(overrides?: CallOverrides): Promise<[boolean]>;

    getStakingCountHistory(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[DivitrendRewards.TrndStakeStructOutput[]]>;

    getStakingLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakingOptionData(
      option: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, number, BigNumber]>;

    getStakingOptions(overrides?: CallOverrides): Promise<[number[]]>;

    getTRNDAddress(overrides?: CallOverrides): Promise<[string]>;

    getThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotStakAboveThres(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotStakingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalRewardedETH(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTrndNftAddress(overrides?: CallOverrides): Promise<[string]>;

    getUserEthClaimData(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getUserNftStakingData(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[], BigNumber, BigNumber]>;

    getUserStakingClaimData(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getUserStakingData(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    initialize(
      tokenAddress: PromiseOrValue<string>,
      nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingEthRew(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingNftEthRew(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingStakingRew(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMalusPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMalusTaxPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakingLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakingOptionData(
      option: PromiseOrValue<BigNumberish>,
      vestingTime: PromiseOrValue<BigNumberish>,
      apy: PromiseOrValue<BigNumberish>,
      maxNftSlots: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakingOptions(
      options: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTRNDAddress(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setThreshold(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrndNftAddress(
      nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeNfts(
      nftIds: PromiseOrValue<BigNumberish>[],
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstakeNfts(
      _stakingOption: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimEth(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimStaking(
    _stakingOption: PromiseOrValue<BigNumberish>,
    compoundPerc: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositETH(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enterStaking(
    _tokenAmount: PromiseOrValue<BigNumberish>,
    _stakingOption: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitStaking(
    _stakingOption: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActualMalus(
    account: PromiseOrValue<string>,
    _stakingOption: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getContractNftBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getDepositETH(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getDepositNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getEthDeposit(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getLastEthDeposit(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getLastNftCount(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber[], BigNumber, BigNumber]>;

  getLastStakingCount(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getMalusPerc(overrides?: CallOverrides): Promise<BigNumber>;

  getMalusTaxPerc(overrides?: CallOverrides): Promise<number>;

  getNftCountHistory(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DivitrendRewards.NftStakeStructOutput[]>;

  getPaused(overrides?: CallOverrides): Promise<boolean>;

  getStakingCountHistory(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DivitrendRewards.TrndStakeStructOutput[]>;

  getStakingLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getStakingOptionData(
    option: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber, number, BigNumber]>;

  getStakingOptions(overrides?: CallOverrides): Promise<number[]>;

  getTRNDAddress(overrides?: CallOverrides): Promise<string>;

  getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  getTotStakAboveThres(overrides?: CallOverrides): Promise<BigNumber>;

  getTotStakingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalRewardedETH(overrides?: CallOverrides): Promise<BigNumber>;

  getTrndNftAddress(overrides?: CallOverrides): Promise<string>;

  getUserEthClaimData(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getUserNftStakingData(
    account: PromiseOrValue<string>,
    _stakingOption: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber[], BigNumber, BigNumber]>;

  getUserStakingClaimData(
    account: PromiseOrValue<string>,
    _stakingOption: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getUserStakingData(
    account: PromiseOrValue<string>,
    _stakingOption: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  initialize(
    tokenAddress: PromiseOrValue<string>,
    nftAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingEthRew(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingNftEthRew(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingStakingRew(
    account: PromiseOrValue<string>,
    _stakingOption: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMalusPerc(
    perc: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMalusTaxPerc(
    perc: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakingLimit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakingOptionData(
    option: PromiseOrValue<BigNumberish>,
    vestingTime: PromiseOrValue<BigNumberish>,
    apy: PromiseOrValue<BigNumberish>,
    maxNftSlots: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakingOptions(
    options: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTRNDAddress(
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setThreshold(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrndNftAddress(
    nftAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeNfts(
    nftIds: PromiseOrValue<BigNumberish>[],
    _stakingOption: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstakeNfts(
    _stakingOption: PromiseOrValue<BigNumberish>,
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    nftAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawETH(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimEth(overrides?: CallOverrides): Promise<void>;

    claimStaking(
      _stakingOption: PromiseOrValue<BigNumberish>,
      compoundPerc: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositETH(overrides?: CallOverrides): Promise<void>;

    enterStaking(
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    exitStaking(
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getActualMalus(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getContractNftBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositETH(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getDepositNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getEthDeposit(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getLastEthDeposit(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getLastNftCount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[], BigNumber, BigNumber]>;

    getLastStakingCount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getMalusPerc(overrides?: CallOverrides): Promise<BigNumber>;

    getMalusTaxPerc(overrides?: CallOverrides): Promise<number>;

    getNftCountHistory(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DivitrendRewards.NftStakeStructOutput[]>;

    getPaused(overrides?: CallOverrides): Promise<boolean>;

    getStakingCountHistory(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DivitrendRewards.TrndStakeStructOutput[]>;

    getStakingLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingOptionData(
      option: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber, number, BigNumber]>;

    getStakingOptions(overrides?: CallOverrides): Promise<number[]>;

    getTRNDAddress(overrides?: CallOverrides): Promise<string>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getTotStakAboveThres(overrides?: CallOverrides): Promise<BigNumber>;

    getTotStakingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalRewardedETH(overrides?: CallOverrides): Promise<BigNumber>;

    getTrndNftAddress(overrides?: CallOverrides): Promise<string>;

    getUserEthClaimData(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getUserNftStakingData(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[], BigNumber, BigNumber]>;

    getUserStakingClaimData(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getUserStakingData(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    initialize(
      tokenAddress: PromiseOrValue<string>,
      nftAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingEthRew(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingNftEthRew(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingStakingRew(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMalusPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMalusTaxPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingOptionData(
      option: PromiseOrValue<BigNumberish>,
      vestingTime: PromiseOrValue<BigNumberish>,
      apy: PromiseOrValue<BigNumberish>,
      maxNftSlots: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingOptions(
      options: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTRNDAddress(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setThreshold(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrndNftAddress(
      nftAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeNfts(
      nftIds: PromiseOrValue<BigNumberish>[],
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unstakeNfts(
      _stakingOption: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETH(overrides?: CallOverrides): Promise<void>;

    withdrawTokens(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "EthClaimed(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): EthClaimedEventFilter;
    EthClaimed(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): EthClaimedEventFilter;

    "EthDeposited(address,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      remainingsWithdrawn?: null
    ): EthDepositedEventFilter;
    EthDeposited(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      remainingsWithdrawn?: null
    ): EthDepositedEventFilter;

    "FactoriesStaked(address,uint256,uint256[],uint8)"(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      nftIds?: null,
      stakingOption?: null
    ): FactoriesStakedEventFilter;
    FactoriesStaked(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      nftIds?: null,
      stakingOption?: null
    ): FactoriesStakedEventFilter;

    "FactoriesUnstaked(address,uint256,uint256[],uint8)"(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      nftIds?: null,
      stakingOption?: null
    ): FactoriesUnstakedEventFilter;
    FactoriesUnstaked(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      nftIds?: null,
      stakingOption?: null
    ): FactoriesUnstakedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "TrndClaimed(address,uint256,uint8)"(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      stakingOption?: null
    ): TrndClaimedEventFilter;
    TrndClaimed(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      stakingOption?: null
    ): TrndClaimedEventFilter;

    "TrndCompounded(address,uint256,uint8)"(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      stakingOption?: null
    ): TrndCompoundedEventFilter;
    TrndCompounded(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      stakingOption?: null
    ): TrndCompoundedEventFilter;

    "TrndStaked(address,uint256,uint8)"(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      stakingOption?: null
    ): TrndStakedEventFilter;
    TrndStaked(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      stakingOption?: null
    ): TrndStakedEventFilter;

    "TrndUnstaked(address,uint256,uint8)"(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      stakingOption?: null
    ): TrndUnstakedEventFilter;
    TrndUnstaked(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      stakingOption?: null
    ): TrndUnstakedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    claimEth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimStaking(
      _stakingOption: PromiseOrValue<BigNumberish>,
      compoundPerc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enterStaking(
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitStaking(
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActualMalus(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getContractNftBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositETH(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getEthDeposit(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastEthDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    getLastNftCount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastStakingCount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMalusPerc(overrides?: CallOverrides): Promise<BigNumber>;

    getMalusTaxPerc(overrides?: CallOverrides): Promise<BigNumber>;

    getNftCountHistory(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaused(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingCountHistory(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingOptionData(
      option: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingOptions(overrides?: CallOverrides): Promise<BigNumber>;

    getTRNDAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getTotStakAboveThres(overrides?: CallOverrides): Promise<BigNumber>;

    getTotStakingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalRewardedETH(overrides?: CallOverrides): Promise<BigNumber>;

    getTrndNftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getUserEthClaimData(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserNftStakingData(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakingClaimData(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakingData(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      tokenAddress: PromiseOrValue<string>,
      nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingEthRew(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingNftEthRew(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingStakingRew(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMalusPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMalusTaxPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakingLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakingOptionData(
      option: PromiseOrValue<BigNumberish>,
      vestingTime: PromiseOrValue<BigNumberish>,
      apy: PromiseOrValue<BigNumberish>,
      maxNftSlots: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakingOptions(
      options: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTRNDAddress(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setThreshold(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrndNftAddress(
      nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeNfts(
      nftIds: PromiseOrValue<BigNumberish>[],
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstakeNfts(
      _stakingOption: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTokens(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimEth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimStaking(
      _stakingOption: PromiseOrValue<BigNumberish>,
      compoundPerc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enterStaking(
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitStaking(
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActualMalus(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractNftBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositETH(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEthDeposit(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastEthDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastNftCount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastStakingCount(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMalusPerc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMalusTaxPerc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNftCountHistory(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakingCountHistory(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakingOptionData(
      option: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingOptions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTRNDAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotStakAboveThres(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotStakingAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalRewardedETH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrndNftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserEthClaimData(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserNftStakingData(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakingClaimData(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakingData(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      tokenAddress: PromiseOrValue<string>,
      nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingEthRew(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingNftEthRew(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingStakingRew(
      account: PromiseOrValue<string>,
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMalusPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMalusTaxPerc(
      perc: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakingLimit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakingOptionData(
      option: PromiseOrValue<BigNumberish>,
      vestingTime: PromiseOrValue<BigNumberish>,
      apy: PromiseOrValue<BigNumberish>,
      maxNftSlots: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakingOptions(
      options: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTRNDAddress(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setThreshold(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrndNftAddress(
      nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeNfts(
      nftIds: PromiseOrValue<BigNumberish>[],
      _stakingOption: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstakeNfts(
      _stakingOption: PromiseOrValue<BigNumberish>,
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
